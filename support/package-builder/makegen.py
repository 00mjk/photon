#!/usr/bin/env python

from optparse import OptionParser
from xml.dom import minidom
from Specutils import Specutils
import os
import re

class Package:
    def __init__(self, id, name, arch, spec, rpm, req_pkgs, build_req_pkgs):
        self.id = id
        self.name = name
        self.arch = arch
        self.spec = spec
        self.rpm = rpm
        self.req_pkgs = req_pkgs
        self.build_req_pkgs = build_req_pkgs

class MakeBuilder(object):
    def __init__(self, manifest, src_path, spec_path, out_path):
        self.manifest = manifest
        self.src_path = src_path
        self.spec_path = spec_path
        self.out_path = out_path
        self.packages = []

        xmldoc = minidom.parse(self.manifest)
        for node in xmldoc.getElementsByTagName("packages"):
            packages = node.getElementsByTagName("package") 
            for pkg in packages:
                id_node = pkg.attributes.get("id")
                name_node = pkg.attributes.get("name")
                if name_node == None:
                    name_node = id_node
                rpm_name = name_node.value
                spec_node = pkg.attributes.get("spec")
                if spec_node == None:
                    spec_part = id_node.value
                else:
                    spec_part = spec_node.value
                spec = "%s.spec" % spec_part
                spec_file_path = os.path.join(
                                        self.spec_path, 
                                        spec_part,
                                        spec)
                specparser = Specutils(spec_file_path)
                arch = specparser.getBuildArch(id_node.value)
                self.packages.append(Package(
                                        id_node.value,
                                        name_node.value,
                                        arch,
                                        spec,
                                        "%s.%s.rpm" % 
                                         (specparser.getRPMName(rpm_name),
                                          arch
                                         ),
                                        specparser.getRequires(rpm_name),
                                        specparser.getBuildRequires(rpm_name)))

    def create(self):

        makefile = open(self.out_path, "w")

        self.writePreamble(makefile)

        self.writeBasicPathDefs(makefile)

        self.writePackageDefs(makefile)
        
        self.writeRules(makefile)

        makefile.close()

    def writePreamble(self, makefile):

        makefile.write("#\n#Copyright 2015 VMware, Inc.\n#\n")
        makefile.write("#Note: Do not edit this file directly.\n")
        makefile.write("#      Re-generate it using makegen.py.\n#\n")
        makefile.write("MKDIR=/bin/mkdir\n")
        makefile.write("RM=/bin/rm\n")
        makefile.write("RMDIR=/bin/rm -rf\n")
        makefile.write("CP=/bin/cp\n")
        makefile.write("TAR=/bin/tar\n")
        makefile.write("RPMBUILD=/usr/bin/rpmbuild\n\n")
        makefile.write("SRCROOT:=$(CURDIR)\n")

    def writeBasicPathDefs(self, makefile):

        makefile.write("\nPHOTON_STAGE=$(SRCROOT)/stage\n")
        makefile.write("PHOTON_TOOLS_DIR=$(PHOTON_STAGE)/tools\n")
        makefile.write("PHOTON_TOOLCHAIN_DIR=$(SRCROOT)/support/toolchain\n")
        makefile.write("PHOTON_TOOLCHAIN=$(PHOTON_STAGE)/tools-build.tar\n")
        makefile.write("PHOTON_TOOLCHAIN_MINIMAL=$(PHOTON_STAGE)/tools.tar.gz\n")
        makefile.write("PHOTON_TOOLCHAIN_MIN_LIST=$(PHOTON_TOOLCHAIN_DIR)/tools-minimal.list\n")
        makefile.write("PHOTON_TOOLCHAIN_BUILDER=$(PHOTON_TOOLCHAIN_DIR)/mk-tools.sh\n")
        makefile.write("PHOTON_TOOLS_MAKE=$(PHOTON_TOOLS_DIR)/bin/make\n")
        makefile.write("PHOTON_LOGS_DIR=$(PHOTON_STAGE)/LOGS\n")
        makefile.write("PHOTON_RPMS_DIR=$(PHOTON_STAGE)/RPMS\n")
        makefile.write("PHOTON_SPECS_DIR=$(SRCROOT)/SPECS\n")
        makefile.write("PHOTON_SRCS_DIR=$(SRCROOT)/SOURCES\n")
        makefile.write("PHOTON_PKG_BUILDER_DIR=$(SRCROOT)/support/package-builder\n")
        makefile.write("PHOTON_INSTALLER_DIR=$(SRCROOT)/installer\n")
        makefile.write("PHOTON_INSTALLER=$(PHOTON_INSTALLER_DIR)/photonInstaller.py\n")
        makefile.write("PHOTON_PACKAGE_BUILDER=$(PHOTON_PKG_BUILDER_DIR)/build_package.py\n")
        makefile.write("PHOTON_CHROOT_CLEANER=$(PHOTON_PKG_BUILDER_DIR)/cleanup-build-root.sh\n")
        makefile.write("PHOTON_RPMS_DIR_NOARCH=$(PHOTON_RPMS_DIR)/noarch\n")
        makefile.write("PHOTON_RPMS_DIR_X86_64=$(PHOTON_RPMS_DIR)/x86_64\n")
        makefile.write("PHOTON_CHROOT_PATH=/mnt/photonroot\n")
        makefile.write("PHOTON_FS_ROOT=/usr/src/photon\n")
        makefile.write("PHOTON_CHROOT_RPMS_DIR_NOARCH=$(PHOTON_CHROOT_PATH)/$(PHOTON_FS_ROOT)/RPMS/noarch\n")
        makefile.write("PHOTON_CHROOT_RPMS_DIR_X86_64=$(PHOTON_CHROOT_PATH)/$(PHOTON_FS_ROOT)/RPMS/x86_64\n")
        makefile.write("PHOTON_CHROOT_BUILD_DIR=$(PHOTON_CHROOT_PATH)/$(PHOTON_FS_ROOT)/BUILD\n")
        makefile.write("PHOTON_CHROOT_BUILDROOT_DIR=$(PHOTON_CHROOT_PATH)/$(PHOTON_FS_ROOT)/BUILDROOT\n")

        makefile.write("\n")

    def writePackageDefs(self, makefile):

        for pkg in self.packages:
            pkg_id = pkg.id.upper().replace("-","_")
            arch = pkg.arch
            rpm_folder = None
            if arch == "noarch":
               rpm_folder = "$(PHOTON_RPMS_DIR_NOARCH)"
            else:
               rpm_folder = "$(PHOTON_RPMS_DIR_X86_64)"
            makefile.write("\nPHOTON_PKG_%s=%s\n" % (pkg_id, pkg.id))
            makefile.write("PHOTON_PKG_%s_CHROOT=/mnt/photonroot-%s\n" % (pkg_id, pkg.id))
            if pkg.req_pkgs:
                makefile.write("PHOTON_PKG_%s_REQUIRES=" % pkg_id)
                for req in pkg.req_pkgs:
                    makefile.write("\\\n\t$(PHOTON_PKG_%s_RPM)" % req.upper().replace("-","_"))
                makefile.write("\n")
            if pkg.build_req_pkgs:
                makefile.write("PHOTON_PKG_%s_BUILD_REQUIRES=" % pkg_id)
                for breq in pkg.build_req_pkgs:
                    makefile.write("\\\n\t$(PHOTON_PKG_%s_RPM)" % breq.upper().replace("-","_"))
                makefile.write("\n")
            makefile.write("PHOTON_PKG_%s_RPM_NAME=%s\n" % (pkg_id, pkg.rpm))
            makefile.write("PHOTON_PKG_%s_RPM=%s/$(PHOTON_PKG_%s_RPM_NAME)\n" % (pkg_id, rpm_folder, pkg_id))

        makefile.write("\nPHOTON_PACKAGE_LIST=")

        for pkg in self.packages:
            pkg_id = pkg.id.upper().replace("-","_")
            makefile.write(" \\\n\t$(PHOTON_PKG_%s_RPM)" % pkg_id)
        makefile.write("\n")

    def writeRules(self, makefile):
        
        self.writeBasicRules(makefile)
        
        self.writePackageRules(makefile)
        
        self.writeToolchainRules(makefile)
        
        self.writeCleanupRules(makefile)
        
    def writeBasicRules(self, makefile):

        makefile.write("\n.PHONY : all iso toolchain toolchain-minmal packages\n")
        makefile.write("\nall : iso\n")
        
        makefile.write("\niso : $(PHOTON_PACKAGE_LIST) $(PHOTON_TOOLCHAIN_MINIMAL)\n")
        makefile.write("\t@echo \"Building Photon ISO...\"\n")
        makefile.write("\t@cd $(PHOTON_INSTALLER_DIR) && \\\n")
        makefile.write("\t\t$(PHOTON_INSTALLER) \\\n")
        makefile.write("\t\t\t-i $(PHOTON_STAGE)/photon.iso \\\n")
        makefile.write("\t\t\t-w $(PHOTON_STAGE)/photon_iso \\\n")
        makefile.write("\t\t\t-t $(PHOTON_STAGE) \\\n")
        makefile.write("\t\t\t-f > \\\n")
        makefile.write("\t\t\t$(PHOTON_LOGS_DIR)/installer.log 2>&1\n")
        
    def writePackageRules(self, makefile):
        
        makefile.write("\npackages : $(PHOTON_PACKAGE_LIST)\n")
        for pkg in self.packages:
            pkg_id = pkg.id.upper().replace("-","_")
            makefile.write("\n$(PHOTON_PKG_%s) : $(PHOTON_PKG_%s_RPM)\n\n" % (pkg_id, pkg_id))
            reqs=""
            build_reqs=""
            if pkg.req_pkgs:
                reqs="$(PHOTON_PKG_%s_REQUIRES)" % pkg_id
            if pkg.build_req_pkgs:
                build_reqs="$(PHOTON_PKG_%s_BUILD_REQUIRES)" % pkg_id
            spec=pkg.spec[:-len(".spec")]
            if spec == pkg.id:
                spec = None
            if pkg.arch == "noarch":
                arch_dir = "$(PHOTON_RPMS_DIR_NOARCH)"
            else:
                arch_dir = "$(PHOTON_RPMS_DIR_X86_64)"
            if spec == None:
                makefile.write("\n$(PHOTON_PKG_%s_RPM) : $(PHOTON_TOOLCHAIN) %s %s | %s\n" % (pkg_id, reqs, build_reqs, arch_dir))
            else:
                makefile.write("\n$(PHOTON_PKG_%s_RPM) : $(PHOTON_PKG_%s) | %s\n" %  (pkg_id, spec.upper().replace("-","_"), arch_dir))

            makefile.write("\t@echo \"Building $(PHOTON_PKG_%s_RPM)...\"\n" % pkg_id)
            makefile.write("\t@$(MKDIR) -p $(PHOTON_PKG_%s_CHROOT) && \\\n" % pkg_id)
            makefile.write("\tcd $(PHOTON_PKG_BUILDER_DIR) && \\\n")
            makefile.write("\t$(PHOTON_PACKAGE_BUILDER) \\\n")
            makefile.write("\t\t-i \\\n")
            makefile.write("\t\t-b $(PHOTON_PKG_%s_CHROOT) \\\n" % pkg_id)
            makefile.write("\t\t-s $(PHOTON_SPECS_DIR) \\\n")
            makefile.write("\t\t-r $(PHOTON_RPMS_DIR) \\\n")
            makefile.write("\t\t-o $(PHOTON_SRCS_DIR) \\\n")
            makefile.write("\t\t-p $(PHOTON_STAGE) \\\n")
            makefile.write("\t\t-l $(PHOTON_LOGS_DIR) \\\n")
            makefile.write("\t\t%s\n" % pkg.id)

            makefile.write("\nclean-chroot-%s :\n" % pkg.id)
            makefile.write("\t@if [ -d $(PHOTON_PKG_%s_CHROOT) ]; then \\\n" % pkg_id)
            makefile.write("\t\techo \"Cleaning chroot path $(PHOTON_PKG_%s_CHROOT)...\"; \\\n" % pkg_id)
            makefile.write("\t\tcd $(PHOTON_PKG_BUILDER_DIR) && \\\n")
            makefile.write("\t\t$(PHOTON_CHROOT_CLEANER) $(PHOTON_PKG_%s_CHROOT) && \\\n" % pkg_id)
            makefile.write("\t\t$(RMDIR) $(PHOTON_PKG_%s_CHROOT); \\\n" % pkg_id)
            makefile.write("\tfi\n")

    def writeToolchainRules(self, makefile):
    
        makefile.write("\ntoolchain : $(PHOTON_TOOLCHAIN)\n\n")
    
        makefile.write("\n$(PHOTON_TOOLCHAIN) : $(PHOTON_STAGE) | $(PHOTON_RPM_DIRS_NOARCH) $(PHOTON_RPM_DIRS_X86_64)\n")
        makefile.write("\t@echo \"Building toolchain...\"\n")
        makefile.write("\t@cd $(PHOTON_TOOLCHAIN_DIR) && \\\n")
        makefile.write("\t\t$(PHOTON_TOOLCHAIN_BUILDER) \\\n")
        makefile.write("\t\t\t$(PHOTON_SRCS_DIR) \\\n")
        makefile.write("\t\t\t$(PHOTON_SPECS_DIR) \\\n")
        makefile.write("\t\t\t$(PHOTON_LOGS_DIR) \\\n")
        makefile.write("\t\t\t$(PHOTON_STAGE)\n")
        
        makefile.write("\ntoolchain-minimal : $(PHOTON_TOOLCHAIN_MINIMAL)\n")
        makefile.write("\n$(PHOTON_TOOLCHAIN_MINIMAL) : $(PHOTON_TOOLCHAIN) $(PHOTON_TOOLCHAIN_MIN_LIST)\n")
        makefile.write("\t@echo \"Building minimal toolchain...\"\n")
        makefile.write("\t@$(RMDIR) $(PHOTON_TOOLS_DIR) && \\\n")
        makefile.write("\tcd $(PHOTON_STAGE) && \\\n")
        makefile.write("\t$(TAR) xvf $(PHOTON_TOOLCHAIN) > $(PHOTON_LOGS_DIR)/toolchain-minimal.log 2>&1 && \\\n")
        makefile.write("\t$(TAR) cvfz \\\n")
        makefile.write("\t\t$@ \\\n")
        makefile.write("\t\t-T $(PHOTON_TOOLCHAIN_MIN_LIST) >> \\\n")
        makefile.write("\t\t   $(PHOTON_LOGS_DIR)/toolchain-minimal-list.log 2>&1 && \\\n")
        makefile.write("\t$(RMDIR) $(PHOTON_TOOLS_DIR)\n")
        
        makefile.write("\n$(PHOTON_STAGE) : $(PHOTON_RPMS_DIR_NOARCH) $(PHOTON_RPMS_DIR_X86_64) $(PHOTON_LOGS_DIR)\n")
        
        makefile.write("\n$(PHOTON_RPMS_DIR_NOARCH):\n")
        makefile.write("\t@test -d $@ || $(MKDIR) -p $@\n")
        
        makefile.write("\n$(PHOTON_RPMS_DIR_X86_64):\n")
        makefile.write("\t@test -d $@ || $(MKDIR) -p $@\n")
        
        makefile.write("\n$(PHOTON_LOGS_DIR):\n")
        makefile.write("\t@test -d $@ || $(MKDIR) -p $@\n")
        
        makefile.write("\n$(PHOTON_CHROOT_PATH):\n")
        makefile.write("\t@test -d $@ || $(MKDIR) -p $@\n")
        
        makefile.write("\ncheck-build-prereq : check-bison check-g++ check-gawk check-createrepo\n")
        makefile.write("\ncheck-bison :\n")
        makefile.write("\t@command -v bison >/dev/null 2>&1 || { echo \"Package bison is not installed. Aborting.\" >&2; exit 1; }\n")
        makefile.write("\ncheck-g++ :\n")
        makefile.write("\t@command -v g++ >/dev/null 2>&1 || { echo \"Package g++ is not installed. Aborting.\" >&2; exit 1; }\n")
        makefile.write("\ncheck-gawk :\n")
        makefile.write("\t@command -v gawk >/dev/null 2>&1 || { echo \"Package gawk is not installed. Aborting.\" >&2; exit 1; }\n")
        makefile.write("\ncheck-createrepo :\n")
        makefile.write("\t@command -v createrepo >/dev/null 2>&1 || { echo \"Package createrepo is not installed. Aborting.\" >&2; exit 1; }\n")
        
    def writeCleanupRules(self, makefile):
    
        makefile.write("\nclean : clean-install clean-pkg-chroots clean-chroot\n")
        makefile.write("\t@if [ -d $(PHOTON_STAGE) ]; then \\\n")
        makefile.write("\t\tif [ -f $(PHOTON_STAGE)/photon.iso ]; then \\\n")
        makefile.write("\t\t\techo \"Deleting Photon ISO...\"; \\\n")
        makefile.write("\t\t\t$(RM) -f $(PHOTON_STAGE)/photon.iso; \\\n")
        makefile.write("\t\tfi; \\\n")
        makefile.write("\t\techo \"Deleting stage dir...\"; \\\n")
        makefile.write("\t\t$(RMDIR) $(PHOTON_STAGE); \\\n")
        makefile.write("\tfi\n")
        
        makefile.write("\nclean-install :\n")
        makefile.write("\t@if [ -d $(PHOTON_STAGE)/photon_iso ]; then \\\n")
        makefile.write("\t\techo \"Cleaning installer working directory...\"; \\\n")
        makefile.write("\t\tcd $(PHOTON_INSTALLER_DIR) && \\\n")
        makefile.write("\t\t$(PHOTON_INSTALLER_DIR)/mk-unmount-disk.sh -w $(PHOTON_STAGE)/photon_iso && \\\n")
        makefile.write("\t\t$(PHOTON_INSTALLER_DIR)/mk-clean-lfs.sh -w $(PHOTON_STAGE)/photon_iso && \\\n")
        makefile.write("\t\t$(RMDIR) $(PHOTON_STAGE)/photon_iso; \\\n")
        makefile.write("\tfi\n")
        
        makefile.write("\nclean-chroot :\n")
        makefile.write("\t@if [ -d $(PHOTON_CHROOT_PATH) ]; then \\\n")
        makefile.write("\t\techo \"Cleaning chroot path...\"; \\\n")
        makefile.write("\t\tcd $(PHOTON_PKG_BUILDER_DIR) && \\\n")
        makefile.write("\t\t$(PHOTON_CHROOT_CLEANER) $(PHOTON_CHROOT_PATH) && \\\n")
        makefile.write("\t\t$(RMDIR) $(PHOTON_CHROOT_PATH); \\\n")
        makefile.write("\tfi\n")
        
        makefile.write("\nPHOTON_CLEAN_CHROOT_TARGETS=")
        for pkg in self.packages:
            makefile.write(" \\\n\tclean-chroot-%s" % pkg.id)

        makefile.write("\n\nclean-pkg-chroots : $(PHOTON_CLEAN_CHROOT_TARGETS)\n\n")

def main():
    usage = "Usage: %prog [options]"
    parser = OptionParser(usage)
    parser.add_option(
              "-m",
              "--manifest",
              dest="manifest",
              default="build-manifest.xml")
    parser.add_option(
              "-s",
              "--spec-path",
              dest="spec_path",
              default="../../SPECS")
    parser.add_option(
              "-o",
              "--source-path",
              dest="source_path",
              default="../../SOURCES")
    parser.add_option(
              "-f",
              "--output",
              dest="out_path",
              default="./Makefile")
    (options, args) = parser.parse_args()

    makegen = MakeBuilder(
                  options.manifest,
                  options.source_path,
                  options.spec_path,
                  options.out_path)
    makegen.create()
    
if __name__ == '__main__':
    main()

This is for CVE-2012-6711.

Following 4 files patched, out of  18. 
 CWRU/misc/endian.c  |   21 +
 CWRU/misc/endian2.c |   13 +
 CWRU/misc/endian3.c |   21 +
 execute_cmd.c       |    2 +

Below 10 files already have the fix:
 MANIFEST
 doc/bash.1
 doc/builtins.1
 error.c
 lib/sh/shquote.c
 lib/sh/strtrans.c
 lib/sh/unicode.c
 locale.c
 po/gl.po
 variables.c

Below 4 temp & chlog files not require.
 CWRU/CWRU.chlog
 CWRU/CWRU.chlog~
 error.c~
 lib/sh/unicode.c~

---
diff --git a/CWRU/misc/endian.c b/CWRU/misc/endian.c
new file mode 100644
index 0000000..3dd30b3
--- /dev/null
+++ b/CWRU/misc/endian.c
@@ -0,0 +1,21 @@
+#include <stdio.h>
+
+main()
+{
+
+union {
+	long int l;
+	char c[sizeof(long int)];
+} u;
+	int x0, x1, x2, x3;
+
+	u.l = 1;
+	x0 = u.c[0];
+	x3 = u.c[sizeof (long int) - 1];
+	printf ("x0 = %d x3 = %d (%s)\n", x0, x3, x3 == 1 ? "bigendian" : "littleendian");
+	x0 = u.l >> 24;
+	x1 = u.l >> 16;
+	x2 = u.l >> 8;
+	x3 = u.l & 0xff;
+	printf ("x0:x3: %d %d %d %d\n", x0, x1, x2, x3);
+}
diff --git a/CWRU/misc/endian2.c b/CWRU/misc/endian2.c
new file mode 100644
index 0000000..b84754b
--- /dev/null
+++ b/CWRU/misc/endian2.c
@@ -0,0 +1,13 @@
+#include <stdio.h>
+ 
+int
+main()
+{
+	int i = 0x12345678;
+	char *x;
+
+	x = (char *)&i;
+	printf ("0x%x\n", *x);
+	printf ((*x == 0x78) ? "little endian\n" : "big endian\n");
+	return 0;
+}
diff --git a/CWRU/misc/endian3.c b/CWRU/misc/endian3.c
new file mode 100644
index 0000000..86b478b
--- /dev/null
+++ b/CWRU/misc/endian3.c
@@ -0,0 +1,21 @@
+#include <stdio.h>
+
+main()
+{
+
+	union {
+		int l;
+		char c[sizeof(int)];
+	} u;
+	int x0, x1, x2, x3;
+
+	u.l = 0x012345678;
+	x0 = u.c[0];
+	x3 = u.c[sizeof (int) - 1];
+	printf ("x0 = 0x%x x3 = 0x%x (%s)\n", x0, x3, x3 == 0x78 ? "bigendian" : "littleendian");
+	x0 = (u.l >> 24) & 0xff;
+	x1 = (u.l >> 16) & 0xff;
+	x2 = (u.l >> 8)  & 0xff;
+	x3 = u.l & 0xff;
+	printf ("big endian x0:x3: %x %x %x %x\n", x0, x1, x2, x3);
+}
diff --git a/execute_cmd.c b/execute_cmd.c
index 19a685d..5def9b0 100644
--- a/execute_cmd.c
+++ b/execute_cmd.c
@@ -2370,7 +2370,9 @@ execute_pipeline (command, asynchronous, pipe_in, pipe_out, fds_to_close)
       unfreeze_jobs_list ();
     }
 
+#if defined (JOB_CONTROL)
   discard_unwind_frame ("lastpipe-exec");
+#endif
 
   return (exec_result);
 }
-- 
cgit v1.0-41-gc330


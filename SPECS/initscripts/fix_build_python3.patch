--- a/po/xgettext_sh.py	2020-06-23 21:16:12.395781299 +0800
+++ b/po/xgettext_sh.py	2020-06-23 21:31:05.337854722 +0800
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 # sh_xgettext
 # Arnaldo Carvalho de Melo <acme@conectiva.com.br>
 # Wed Mar 10 10:24:35 EST 1999
@@ -24,36 +24,76 @@
 
 
 from sys import argv
-from string import find, split, strip
+import string
 import re
 
 s = {}
 pattern = re.compile('[ =]\$"')
 
 def xgettext(arq):
-	line = 0
-	f = open(arq, "r")
-        while 1:
-		l = f.readline()
-		if not l: break
-		line = line + 1
-		if l[0:1] == '#':       continue
-		elif l[0:1] == '\n':    continue
-		else:
-			for match in pattern.finditer(l):
-				pos = match.start()
-				p1 = l.find('"',pos) + 1
-				p2 = p1+1
-				while 1:
-                                    p2 = l.find('"',p2)
-                                    if p2 == -1:
-                                        p2 = p1
-                                        break
-                                    if l[p2-1] == '\\':
-                                        p2 = p2 + 1
-                                    else:
-                                        break
-                                text = l[p1:p2]
+    line = 0
+    f = open(arq, "r")
+
+    while 1:
+        l = f.readline()
+
+        if not l:
+            break;
+
+        line = line + 1
+        if l[0:1] == '#':
+            continue
+        elif l[0:1] == '\n':
+            continue
+        else:
+            for match in pattern.finditer(l):
+                pos = match.start()
+                p1 = l.find('"', pos) + 1
+                p2 = p1 + 1
+
+                while 1:
+                    p2 = l.find('"', p2)
+                    if p2 == -1:
+                        p2 = p1
+                        break
+                    if l[p2-1] == '\\':
+                        p2 = p2 + 1
+                    else:
+                        break
+                text = l[p1:p2]
+
+                if text in s:
+                    s[text].append((arq, line))
+                else:
+                    s[text] = [(arq, line)]
+
+    f.close()
+
+def xgettext(arq):
+    line = 0
+    f = open(arq, "r")
+
+    while 1:
+        l = f.readline()
+        if not l: break
+        line = line + 1
+        if l[0:1] == '#':       continue
+        elif l[0:1] == '\n':    continue
+        else:
+            for match in pattern.finditer(l):
+                pos = match.start()
+                p1 = l.find('"',pos) + 1
+                p2 = p1+1
+                while 1:
+                    p2 = l.find('"',p2)
+                    if p2 == -1:
+                        p2 = p1
+                        break
+                    if l[p2-1] == '\\':
+                        p2 = p2 + 1
+                    else:
+                        break
+                text = l[p1:p2]
 				#text = split(l[pos:], '"')[1]
 				if s.has_key(text):
 				    s[text].append((arq, line))
@@ -62,33 +102,39 @@ def xgettext(arq):
 	f.close()
 
 def print_header():
-	print 'msgid ""' 
-	print 'msgstr ""' 
-	print '"Project-Id-Version: \\n"'
-	print '"PO-Revision-Date: YYYY-MM-DD HH:MM TZO DST\\n"'
-	print '"Last-Translator: \\n"'
-	print '"Language-Team: <XX@li.org>\\n"'
-	print '"MIME-Version: 1.0\\n"'
-	print '"Content-Type: text/plain; charset=ISO-8859-1\\n"'
-	print '"Content-Transfer-Encoding: 8-bit\\n"\n'
+    print('msgid ""')
+    print('msgstr ""')
+    print('"Project-Id-Version: PACKAGE VERSION\\n"')
+    print('"Report-Msgid-Bugs-To: \\n"')
+    print('"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\\n"')
+    print('"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n"')
+    print('"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n"')
+    print('"Language-Team: LANGUAGE <LL@li.org>\\n"')
+    print('"Language: \\n"')
+    print('"MIME-Version: 1.0\\n"')
+    print('"Content-Type: text/plain; charset=UTF-8\\n"')
+    print('"Content-Transfer-Encoding: 8bit\\n"\n')
+
 
 def print_pot():
-	print_header()
+    print_header()
+    for text in list(s.keys()):
+        print('#:', end=' ')
+
+        for p in s[text]:
+            print('%s:%d' % p, end=' ')
+
+        if text.find('%') != -1:
+            print('\n#, c-format', end=' ')
+
+        print('\nmsgid "' + text + '"')
+        print('msgstr ""\n')
 
-	for text in s.keys():
-		print '#:',
-		for p in s[text]:
-			print '%s:%d' % p,
-		if find(text, '%') != -1:
-			print '\n#, c-format',
-		print '\nmsgid "' + text + '"'
-		print 'msgstr ""\n'
-				
 def main():
-	for a in argv:
-		xgettext(a)
+    for a in argv:
+        xgettext(a)
 
-	print_pot()
+    print_pot()
 
 if __name__ == '__main__':
     main()
--- a/po/xgettext_sh	2020-06-23 21:15:00.850038999 +0800
+++ b/po/xgettext_sh	2020-06-23 21:15:58.975454504 +0800
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 
 # xgettext_sh -- extracts translatable strings from a shell script
 # Copyright (C) 1999 Conectiva Consultoria e Desenvolvimento de Sistemas LTDA
@@ -18,10 +18,11 @@
 # Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 
 from sys import path
+
 if not '/usr/lib/conectiva/xgettext_sh' in path:
     path[:0] = ['/usr/lib/conectiva/xgettext_sh']
 
 from xgettext_sh import main
 
 if __name__ == '__main__':
-	main()
+    main()
--- a/po/xgettext_sh.py_org	2020-06-23 21:38:21.800746759 +0800
+++ b/po/xgettext_sh.py	2020-06-23 21:38:44.197301680 +0800
@@ -69,38 +69,6 @@ def xgettext(arq):
 
     f.close()
 
-def xgettext(arq):
-    line = 0
-    f = open(arq, "r")
-
-    while 1:
-        l = f.readline()
-        if not l: break
-        line = line + 1
-        if l[0:1] == '#':       continue
-        elif l[0:1] == '\n':    continue
-        else:
-            for match in pattern.finditer(l):
-                pos = match.start()
-                p1 = l.find('"',pos) + 1
-                p2 = p1+1
-                while 1:
-                    p2 = l.find('"',p2)
-                    if p2 == -1:
-                        p2 = p1
-                        break
-                    if l[p2-1] == '\\':
-                        p2 = p2 + 1
-                    else:
-                        break
-                text = l[p1:p2]
-				#text = split(l[pos:], '"')[1]
-				if s.has_key(text):
-				    s[text].append((arq, line))
-				else:
-				    s[text] = [(arq, line)]
-	f.close()
-
 def print_header():
     print('msgid ""')
     print('msgstr ""')

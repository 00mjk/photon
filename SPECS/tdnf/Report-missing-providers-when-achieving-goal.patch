diff --color -rupN tdnf-2.1.1_bak/client/api.c tdnf-2.1.1/client/api.c
--- tdnf-2.1.1_bak/client/api.c	2020-05-29 22:58:42.000000000 +0530
+++ tdnf-2.1.1/client/api.c	2020-08-12 00:08:29.326448253 +0530
@@ -919,7 +919,6 @@ TDNFResolve(
         BAIL_ON_TDNF_ERROR(dwError);
     }
 
-
     dwError = TDNFValidateCmdArgs(pTdnf);
     BAIL_ON_TDNF_ERROR(dwError);
 
diff --color -rupN tdnf-2.1.1_bak/include/tdnftypes.h tdnf-2.1.1/include/tdnftypes.h
--- tdnf-2.1.1_bak/include/tdnftypes.h	2020-05-29 22:58:42.000000000 +0530
+++ tdnf-2.1.1/include/tdnftypes.h	2020-08-12 00:08:29.326448253 +0530
@@ -144,10 +144,10 @@ typedef enum
 // skip problem type
 typedef enum
 {
-    SKIPPROBLEM_NONE=0,
-    SKIPPROBLEM_CONFLICTS,
-    SKIPPROBLEM_OBSOLETES
-}TDNF_SKIPPROBLEM_TYPE;
+    SKIPPROBLEM_NONE = 0,
+    SKIPPROBLEM_CONFLICTS = 0x1,
+    SKIPPROBLEM_OBSOLETES = 0x2,
+} TDNF_SKIPPROBLEM_TYPE;
 
 typedef struct _TDNF_ *PTDNF;
 
diff --color -rupN tdnf-2.1.1_bak/pytests/config.json.in tdnf-2.1.1/pytests/config.json.in
--- tdnf-2.1.1_bak/pytests/config.json.in	2020-05-29 22:58:42.000000000 +0530
+++ tdnf-2.1.1/pytests/config.json.in	2020-08-12 00:08:29.326448253 +0530
@@ -8,5 +8,6 @@
     "sglversion_pkgname": "tdnf-test-one",
     "mulversion_pkgname": "tdnf-test-multiversion",
     "mulversion_lower": "1.0.1-1",
+    "dummy_requires_pkgname": "tdnf-test-dummy-requires",
     "valgrind_minimum_version": "3.15.0"
 }
diff --color -rupN tdnf-2.1.1_bak/pytests/repo/tdnf-test-dummy-conflicts-0.spec tdnf-2.1.1/pytests/repo/tdnf-test-dummy-conflicts-0.spec
--- tdnf-2.1.1_bak/pytests/repo/tdnf-test-dummy-conflicts-0.spec	1970-01-01 05:30:00.000000000 +0530
+++ tdnf-2.1.1/pytests/repo/tdnf-test-dummy-conflicts-0.spec	2020-08-12 00:08:29.326448253 +0530
@@ -0,0 +1,24 @@
+Summary:        Conflict test spec
+Name:           tdnf-test-dummy-conflicts-0
+Version:        0.1
+Release:        1
+Vendor:         VMware, Inc.
+Distribution:   Photon
+License:        VMware
+Url:            http://www.vmware.com
+Group:          Applications/tdnftest
+
+%description
+Part of tdnf test spec. Basic conflict test.
+
+%prep
+
+%build
+
+%install
+
+%files
+
+%changelog
+*  Fri Aug 07 2020 Shreenidhi Shedi <sshedi@vmware.com> 0.1-1
+-  First version
diff --color -rupN tdnf-2.1.1_bak/pytests/repo/tdnf-test-dummy-conflicts-1.spec tdnf-2.1.1/pytests/repo/tdnf-test-dummy-conflicts-1.spec
--- tdnf-2.1.1_bak/pytests/repo/tdnf-test-dummy-conflicts-1.spec	1970-01-01 05:30:00.000000000 +0530
+++ tdnf-2.1.1/pytests/repo/tdnf-test-dummy-conflicts-1.spec	2020-08-12 00:08:29.326448253 +0530
@@ -0,0 +1,26 @@
+Summary:        Conflict test spec
+Name:           tdnf-test-dummy-conflicts-1
+Version:        0.1
+Release:        1
+Vendor:         VMware, Inc.
+Distribution:   Photon
+License:        VMware
+Url:            http://www.vmware.com
+Group:          Applications/tdnftest
+
+Conflicts:      tdnf-test-dummy-conflicts-0
+
+%description
+Part of tdnf test spec. Basic conflict test.
+
+%prep
+
+%build
+
+%install
+
+%files
+
+%changelog
+*  Fri Aug 07 2020 Shreenidhi Shedi <sshedi@vmware.com> 0.1-1
+-  First version
diff --color -rupN tdnf-2.1.1_bak/pytests/repo/tdnf-test-dummy-obsoletes-0.spec tdnf-2.1.1/pytests/repo/tdnf-test-dummy-obsoletes-0.spec
--- tdnf-2.1.1_bak/pytests/repo/tdnf-test-dummy-obsoletes-0.spec	1970-01-01 05:30:00.000000000 +0530
+++ tdnf-2.1.1/pytests/repo/tdnf-test-dummy-obsoletes-0.spec	2020-08-12 00:08:29.326448253 +0530
@@ -0,0 +1,24 @@
+Summary:        Dummy obsoletes spec
+Name:           tdnf-test-dummy-obsoletes-0
+Version:        0.1
+Release:        1
+Vendor:         VMware, Inc.
+Distribution:   Photon
+License:        VMware
+Url:            http://www.vmware.com
+Group:          Applications/tdnftest
+
+%description
+Part of tdnf test spec. Basic dummy obsoletes spec.
+
+%prep
+
+%build
+
+%install
+
+%files
+
+%changelog
+*  Fri Aug 07 2020 Shreenidhi Shedi <sshedi@vmware.com> 0.1-1
+-  First version
diff --color -rupN tdnf-2.1.1_bak/pytests/repo/tdnf-test-dummy-obsoletes-1.spec tdnf-2.1.1/pytests/repo/tdnf-test-dummy-obsoletes-1.spec
--- tdnf-2.1.1_bak/pytests/repo/tdnf-test-dummy-obsoletes-1.spec	1970-01-01 05:30:00.000000000 +0530
+++ tdnf-2.1.1/pytests/repo/tdnf-test-dummy-obsoletes-1.spec	2020-08-12 00:08:29.326448253 +0530
@@ -0,0 +1,26 @@
+Summary:        Dummy obsoletes spec
+Name:           tdnf-test-dummy-obsoletes-1
+Version:        0.1
+Release:        1
+Vendor:         VMware, Inc.
+Distribution:   Photon
+License:        VMware
+Url:            http://www.vmware.com
+Group:          Applications/tdnftest
+
+Obsoletes:      tdnf-test-dummy-obsoletes-0
+
+%description
+Part of tdnf test spec. Basic dummy obsoletes spec.
+
+%prep
+
+%build
+
+%install
+
+%files
+
+%changelog
+*  Fri Aug 07 2020 Shreenidhi Shedi <sshedi@vmware.com> 0.1-1
+-  First version
diff --color -rupN tdnf-2.1.1_bak/pytests/repo/tdnf-test-dummy-requires.spec tdnf-2.1.1/pytests/repo/tdnf-test-dummy-requires.spec
--- tdnf-2.1.1_bak/pytests/repo/tdnf-test-dummy-requires.spec	1970-01-01 05:30:00.000000000 +0530
+++ tdnf-2.1.1/pytests/repo/tdnf-test-dummy-requires.spec	2020-08-12 00:08:29.326448253 +0530
@@ -0,0 +1,26 @@
+Summary:        Dummy requires spec
+Name:           tdnf-test-dummy-requires
+Version:        0.1
+Release:        1
+Vendor:         VMware, Inc.
+Distribution:   Photon
+License:        VMware
+Url:            http://www.vmware.com
+Group:          Applications/tdnftest
+
+Requires:      dummy-requirement
+
+%description
+Part of tdnf test spec. Basic dummy requirement test.
+
+%prep
+
+%build
+
+%install
+
+%files
+
+%changelog
+*  Fri Aug 07 2020 Shreenidhi Shedi <sshedi@vmware.com> 0.1-1
+-  First version
diff --color -rupN tdnf-2.1.1_bak/pytests/tests/test_check_skip.py tdnf-2.1.1/pytests/tests/test_check_skip.py
--- tdnf-2.1.1_bak/pytests/tests/test_check_skip.py	2020-05-29 22:58:42.000000000 +0530
+++ tdnf-2.1.1/pytests/tests/test_check_skip.py	2020-08-12 00:13:18.506438003 +0530
@@ -7,57 +7,56 @@
 #
 #   Author: Shreenidhi Shedi <sshedi@vmware.com>
 
-import os
-import tempfile
 import pytest
-import shutil
-import subprocess
 
-isNotPhoton = -1
-try:
-    isNotPhoton = subprocess.check_call("uname -a | grep -i photon > /dev/null", shell = True)
-except Exception as e:
-    isNotPhoton = 1
 
-def run_cmd(utils, cmd, retval):
+def run_cmd(utils, opt, retval):
+    cmd = ['tdnf', 'check']
+    cmd.extend(opt)
     ret = utils.run(cmd)
-    if retval == 0:
-        assert(ret['retval'] == 0)
-    else:
-        assert(ret['retval'] != 0)
+    assert(ret['retval'] == retval)
 
-@pytest.fixture(scope='module', autouse=True)
+
+@pytest.fixture(scope='module', autouse = True)
 def setup_test(utils):
     yield
     teardown_test(utils)
 
+
 def teardown_test(utils):
     pass
 
+
 def test_check_skipconflicts(utils):
-    cmd = [ 'tdnf', '--config', '/etc/tdnf/tdnf.conf', 'check', '--skipconflicts']
-    if isNotPhoton == 1:
-        cmd.pop(1)
-        cmd.pop(1)
+    run_cmd(utils, ['--skipconflicts'], 21)
 
-    retval = 0 if isNotPhoton == 1 else 1
-    run_cmd(utils, cmd, retval)
 
 def test_check_skipobsoletes(utils):
-    cmd = [ 'tdnf', '--config', '/etc/tdnf/tdnf.conf', 'check', '--skipobsoletes']
-    if isNotPhoton == 1:
-        cmd.pop(1)
-        cmd.pop(1)
+    run_cmd(utils, ['--skipobsoletes'], 21)
 
-    retval = 0 if isNotPhoton == 1 else 1
-    run_cmd(utils, cmd, retval)
 
 def test_check_providers(utils):
-    cmd = [ 'tdnf', '--config', '/etc/tdnf/tdnf.conf', 'check', '--skipconflicts', '--skipobsoletes']
-    if isNotPhoton == 1:
-        cmd.pop(1)
-        cmd.pop(1)
-
-    # retval may change, keeping it commented
-    #retval = 1 if isNotPhoton == 1 else 0
-    run_cmd(utils, cmd, 0)
+    run_cmd(utils, ['--skipconflicts', '--skipobsoletes'], 21)
+
+
+def test_dummy_conflicts(utils):
+    ret = utils.run(['tdnf', 'check', '--skipobsoletes'])
+    assert ' conflicts ' in ret['stderr'][0]
+    assert ' provides ' in ret['stderr'][1]
+
+
+def test_dummy_obsoletes(utils):
+    ret = utils.run(['tdnf', 'check', '--skipconflicts'])
+    assert ' obsoletes ' in ret['stderr'][0]
+    assert ' provides ' in ret['stderr'][1]
+
+
+def test_dummy_provides(utils):
+    ret = utils.run(['tdnf', 'check', '--skipconflicts', '--skipobsoletes'])
+    assert ' provides ' in ret['stderr'][0]
+
+def test_dummy_check(utils):
+    ret = utils.run(['tdnf', 'check'])
+    assert ' obsoletes ' in ret['stderr'][0]
+    assert ' conflicts ' in ret['stderr'][1]
+    assert ' provides ' in ret['stderr'][2]
diff --color -rupN tdnf-2.1.1_bak/pytests/tests/test_install.py tdnf-2.1.1/pytests/tests/test_install.py
--- tdnf-2.1.1_bak/pytests/tests/test_install.py	2020-05-29 22:58:42.000000000 +0530
+++ tdnf-2.1.1/pytests/tests/test_install.py	2020-08-12 00:13:38.470437296 +0530
@@ -16,17 +16,22 @@ def setup_test(utils):
     yield
     teardown_test(utils)
 
+
 def teardown_test(utils):
-    pass
+    pkgname = utils.config["mulversion_pkgname"]
+    utils.run(['tdnf', 'erase', '-y', pkgname])
+
 
 def test_install_no_arg(utils):
     ret = utils.run([ 'tdnf', 'install' ])
     assert(ret['retval'] == 1001)
 
+
 def test_install_invalid_arg(utils):
     ret = utils.run([ 'tdnf', 'install', 'invalid_package' ])
     assert(ret['retval'] == 1011)
 
+
 def test_install_package_with_version_suffix(utils):
     pkgname = utils.config["mulversion_pkgname"]
     pkgversion = utils.config["mulversion_lower"]
@@ -35,9 +40,16 @@ def test_install_package_with_version_su
     utils.run([ 'tdnf', 'install', '-y', '--nogpgcheck', pkgname + '-' + pkgversion ])
     assert(utils.check_package(pkgname) == True)
 
+
 def test_install_package_without_version_suffix(utils):
     pkgname = utils.config["mulversion_pkgname"]
     utils.erase_package(pkgname)
 
     utils.run([ 'tdnf', 'install', '-y', '--nogpgcheck', pkgname ])
     assert(utils.check_package(pkgname) == True)
+
+
+def test_dummy_requires(utils):
+    pkg = utils.config["dummy_requires_pkgname"]
+    ret = utils.run(['tdnf', 'install', '-y', pkg])
+    assert ' nothing provides ' in ret['stderr'][0]
diff --color -rupN tdnf-2.1.1_bak/solv/tdnfpackage.c tdnf-2.1.1/solv/tdnfpackage.c
--- tdnf-2.1.1_bak/solv/tdnfpackage.c	2020-05-29 22:58:42.000000000 +0530
+++ tdnf-2.1.1/solv/tdnfpackage.c	2020-08-12 00:08:29.330448253 +0530
@@ -1230,7 +1230,7 @@ SolvFindHighestAvailable(
     int dwEvrCompare = 0;
     Id  dwAvailableId = 0;
     Id  dwHighestAvailable = 0;
-    PSolvPackageList pAvailabePkgList = NULL;
+    PSolvPackageList pAvailablePkgList = NULL;
     uint32_t dwCount = 0;
 
     if(!pSack || IsNullOrEmptyString(pszPkgName) || !pdwId)
@@ -1242,19 +1242,19 @@ SolvFindHighestAvailable(
     dwError = SolvFindAvailablePkgByName(
                   pSack,
                   pszPkgName,
-                  &pAvailabePkgList);
+                  &pAvailablePkgList);
     BAIL_ON_TDNF_ERROR(dwError);
 
-    dwError = SolvGetPackageId(pAvailabePkgList, 0, &dwHighestAvailable);
+    dwError = SolvGetPackageId(pAvailablePkgList, 0, &dwHighestAvailable);
     BAIL_ON_TDNF_ERROR(dwError);
 
-    dwError = SolvGetPackageListSize(pAvailabePkgList, &dwCount);
+    dwError = SolvGetPackageListSize(pAvailablePkgList, &dwCount);
     BAIL_ON_TDNF_ERROR(dwError);
 
     for(dwPkgIndex = 1; (uint32_t)dwPkgIndex < dwCount; dwPkgIndex++)
     {
         dwError = SolvGetPackageId(
-                      pAvailabePkgList,
+                      pAvailablePkgList,
                       dwPkgIndex,
                       &dwAvailableId);
         BAIL_ON_TDNF_ERROR(dwError);
@@ -1272,9 +1272,9 @@ SolvFindHighestAvailable(
 
     *pdwId = dwHighestAvailable;
 cleanup:
-    if(pAvailabePkgList)
+    if(pAvailablePkgList)
     {
-        SolvFreePackageList(pAvailabePkgList);
+        SolvFreePackageList(pAvailablePkgList);
     }
     return dwError;
 error:
@@ -1538,6 +1538,11 @@ SkipBasedOnType(
     TDNF_SKIPPROBLEM_TYPE dwSkipProblem
     )
 {
+    if (dwSkipProblem == SKIPPROBLEM_NONE)
+    {
+        return false;
+    }
+
     if (dwSkipProblem == SKIPPROBLEM_CONFLICTS)
     {
         return (type == SOLVER_RULE_PKG_CONFLICTS ||
@@ -1575,9 +1580,9 @@ check_for_providers(
     char *end;
     uint32_t dwError = 0;
     char pkgname[256] = {0};
-    PSolvPackageList pAvailabePkgList = NULL;
+    PSolvPackageList pAvailablePkgList = NULL;
 
-    if (!pSack || !prv_pkgname)
+    if (!pSack || !prv_pkgname || !pszProblem)
     {
         return ERROR_TDNF_INVALID_PARAMETER;
     }
@@ -1587,10 +1592,10 @@ check_for_providers(
         return dwError;
     }
 
-    beg = strstr(pszProblem, "requires ");
+    beg = strstr(pszProblem, " requires ");
     if (beg)
     {
-        beg += strlen("requires ");
+        beg += strlen(" requires ");
         end = strchr(beg, ',');
     }
 
@@ -1613,12 +1618,12 @@ check_for_providers(
         return dwError;
     }
 
-    strcpy(prv_pkgname, pkgname);
-    dwError = SolvFindAvailablePkgByName(pSack, pkgname, &pAvailabePkgList);
-    if (pAvailabePkgList)
+    dwError = SolvFindAvailablePkgByName(pSack, pkgname, &pAvailablePkgList);
+    if (pAvailablePkgList)
     {
-        SolvFreePackageList(pAvailabePkgList);
+        SolvFreePackageList(pAvailablePkgList);
     }
+    strcpy(prv_pkgname, pkgname);
 
     return dwError;
 }
@@ -1655,7 +1660,8 @@ SolvReportProblems(
         type = solver_ruleinfo(pSolv, dwProblemId,
                                &dwSource, &dwTarget, &dwDep);
 
-        if (SkipBasedOnType(type, dwSkipProblem))
+        if ((dwSkipProblem != SKIPPROBLEM_NONE) &&
+            SkipBasedOnType(type, dwSkipProblem))
         {
             continue;
         }
@@ -1663,16 +1669,13 @@ SolvReportProblems(
         pszProblem = solver_problemruleinfo2str(pSolv, type, dwSource,
                                                 dwTarget, dwDep);
 
-        if (type == SOLVER_RULE_PKG_REQUIRES)
+        if (dwSkipProblem != SKIPPROBLEM_NONE &&
+            type == SOLVER_RULE_PKG_REQUIRES)
         {
             if (!check_for_providers(pSack, type, pszProblem, prv_pkgname))
             {
                 continue;
             }
-            else
-            {
-                dwError = ERROR_TDNF_SOLV_FAILED;
-            }
         }
 
         dwError = ERROR_TDNF_SOLV_FAILED;
@@ -1683,10 +1686,6 @@ SolvReportProblems(
     {
         fprintf(stderr, "Found %u problem(s) while resolving\n", total_prblms);
     }
-    else
-    {
-        printf("No problems found while resolving\n");
-    }
 
     return dwError;
 }

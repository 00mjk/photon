patch is reconstructed from -
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=dd5d9951618831aa8f015c6a0ebd3a8f96a9ac32

diff -Naurp a/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c b/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c
--- a/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c	2020-09-02 19:15:36.986310794 +0530
+++ b/src/backend/replication/libpqwalreceiver/libpqwalreceiver.c	2020-09-02 19:36:57.406276561 +0530
@@ -23,6 +23,7 @@
 #include "pqexpbuffer.h"
 #include "access/xlog.h"
 #include "catalog/pg_type.h"
+#include "common/connect.h"
 #include "funcapi.h"
 #include "mb/pg_wchar.h"
 #include "miscadmin.h"
@@ -211,6 +212,22 @@ libpqrcv_connect(const char *conninfo, b
 		return NULL;
 	}
 
+	if (logical)
+	{
+		PGresult   *res;
+
+		res = libpqrcv_PQexec(conn->streamConn,
+							  ALWAYS_SECURE_SEARCH_PATH_SQL);
+		if (PQresultStatus(res) != PGRES_TUPLES_OK)
+		{
+			PQclear(res);
+			ereport(ERROR,
+					(errmsg("could not clear search path: %s",
+							pchomp(PQerrorMessage(conn->streamConn)))));
+		}
+		PQclear(res);
+	}
+
 	conn->logical = logical;
 
 	return conn;
diff -Naurp a/src/backend/replication/logical/worker.c b/src/backend/replication/logical/worker.c
--- a/src/backend/replication/logical/worker.c	2020-09-02 19:15:36.986310794 +0530
+++ b/src/backend/replication/logical/worker.c	2020-09-02 19:36:57.406276561 +0530
@@ -1548,6 +1548,12 @@ ApplyWorkerMain(Datum main_arg)
 	BackgroundWorkerInitializeConnectionByOid(MyLogicalRepWorker->dbid,
 											  MyLogicalRepWorker->userid);
 
+	/*
+	 * Set always-secure search path, so malicious users can't redirect user
+	 * code (e.g. pg_index.indexprs).
+	 */
+	SetConfigOption("search_path", "", PGC_SUSET, PGC_S_OVERRIDE);
+
 	/* Load the subscription into persistent memory context. */
 	ApplyContext = AllocSetContextCreate(TopMemoryContext,
 										 "ApplyContext",
diff -Naurp a/src/test/subscription/t/001_rep_changes.pl b/src/test/subscription/t/001_rep_changes.pl
--- a/src/test/subscription/t/001_rep_changes.pl	2020-09-02 19:15:36.910310796 +0530
+++ b/src/test/subscription/t/001_rep_changes.pl	2020-09-02 19:36:57.406276561 +0530
@@ -16,6 +16,10 @@ $node_subscriber->init(allows_streaming
 $node_subscriber->start;
 
 # Create some preexisting content on publisher
+$node_publisher->safe_psql(
+	'postgres',
+	"CREATE FUNCTION public.pg_get_replica_identity_index(int)
+	 RETURNS regclass LANGUAGE sql AS 'SELECT 1/0'");    # shall not call
 $node_publisher->safe_psql('postgres',
 	"CREATE TABLE tab_notrep AS SELECT generate_series(1,10) AS a");
 $node_publisher->safe_psql('postgres',

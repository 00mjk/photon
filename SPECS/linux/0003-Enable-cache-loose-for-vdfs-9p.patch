From a30d7ebb31dc3e9acccf73c5632e45a936a63ccf Mon Sep 17 00:00:00 2001
From: Mounesh Badiger <badigerm@vmware.com> 
Date: Sun, 23 Aug 2020 17:53:21 +0530
Subject: [PATCH 3/4] Enable cache=loose for vdfs 9p.

cache=loose, helps metadata performance, but due
less photon memory datapath performance regressed.

so only enable loose cache for metadata and datapath
just go through normal zc path.
---
 fs/9p/vfs_file.c        | 30 ++++++++++++++++++++++++++++--
 include/net/9p/client.h |  1 +
 net/9p/client.c         |  6 ++++++
 3 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/fs/9p/vfs_file.c b/fs/9p/vfs_file.c
index ddff999..c685dd0 100644
--- a/fs/9p/vfs_file.c
+++ b/fs/9p/vfs_file.c
@@ -464,6 +464,32 @@ v9fs_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
 	return err;
 }
 
+static ssize_t
+v9fs_cached_file_read_iter(struct kiocb *iocb, struct iov_iter *to)
+{
+	struct inode *inode = iocb->ki_filp->f_mapping->host;
+	struct v9fs_session_info *v9ses = v9fs_inode2v9ses(inode);
+
+	if (v9ses->metaonly) {
+		return v9fs_file_read_iter(iocb, to);
+	}
+
+	return generic_file_read_iter(iocb, to);
+}
+
+static ssize_t
+v9fs_cached_file_write_iter(struct kiocb *iocb, struct iov_iter *from)
+{
+	struct inode *inode = iocb->ki_filp->f_mapping->host;
+	struct v9fs_session_info *v9ses = v9fs_inode2v9ses(inode);
+
+        if (v9ses->metaonly) {
+		return v9fs_file_write_iter(iocb, from);
+	}
+
+	return generic_file_write_iter(iocb, from);
+}
+
 static int v9fs_file_fsync(struct file *filp, loff_t start, loff_t end,
 			   int datasync)
 {
@@ -679,8 +705,8 @@ const struct file_operations v9fs_cached_file_operations = {
 
 const struct file_operations v9fs_cached_file_operations_dotl = {
 	.llseek = generic_file_llseek,
-	.read_iter = generic_file_read_iter,
-	.write_iter = generic_file_write_iter,
+	.read_iter = v9fs_cached_file_read_iter,
+	.write_iter = v9fs_cached_file_write_iter,
 	.open = v9fs_file_open,
 	.release = v9fs_dir_release,
 	.lock = v9fs_file_lock_dotl,
diff --git a/include/net/9p/client.h b/include/net/9p/client.h
index 947a570..2ff5fb0 100644
--- a/include/net/9p/client.h
+++ b/include/net/9p/client.h
@@ -255,6 +255,7 @@ void p9stat_free(struct p9_wstat *);
 
 int p9_is_proto_dotu(struct p9_client *clnt);
 int p9_is_proto_dotl(struct p9_client *clnt);
+int p9_is_fid_proto_dotx(struct p9_fid *fid);
 struct p9_fid *p9_client_xattrwalk(struct p9_fid *, const char *, u64 *);
 int p9_client_xattrcreate(struct p9_fid *, const char *, u64, int);
 int p9_client_readlink(struct p9_fid *fid, char **target);
diff --git a/net/9p/client.c b/net/9p/client.c
index d62f83f..dd49218 100644
--- a/net/9p/client.c
+++ b/net/9p/client.c
@@ -102,6 +102,12 @@ int p9_show_client_options(struct seq_file *m, struct p9_client *clnt)
 }
 EXPORT_SYMBOL(p9_is_proto_dotx);
 
+inline int p9_is_fid_proto_dotx(struct p9_fid *fid)
+{
+   return p9_is_proto_dotx(fid->clnt);
+}
+EXPORT_SYMBOL(p9_is_fid_proto_dotx);
+
 /*
  * Some error codes are taken directly from the server replies,
  * make sure they are valid.
-- 
2.7.4


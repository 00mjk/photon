Changes through CVE-2019-11360 is only related to add_param_to_argv in xshared.c
But following APIs also impacted by buffer overflow, so fix done to defence
attacker from crashing the program.
1. add_param_to_argv() in iptables/ip6tables-restore.c
2. add_param_to_argv() in iptables/iptables-restore.c
3. add_param_to_argv() in iptables/xtables-restore.c

--- a/iptables/ip6tables-restore.c	2019-08-06 16:00:05.816126524 +0530
+++ b/iptables/ip6tables-restore.c	2019-08-06 16:01:34.744123372 +0530
@@ -112,10 +112,24 @@ static void free_argv(void) {
 		free(newargv[i]);
 }
 
+struct xt_param_buf {
+	char	buffer[1024];
+	int 	len;
+};
+
+static void add_param(struct xt_param_buf *param, const char *curchar)
+{
+	param->buffer[param->len++] = *curchar;
+	if (param->len >= sizeof(param->buffer))
+		xtables_error(PARAMETER_PROBLEM,
+			      "Parameter too long!");
+}
+
 static void add_param_to_argv(char *parsestart)
 {
-	int quote_open = 0, escaped = 0, param_len = 0;
-	char param_buffer[1024], *curchar;
+	int quote_open = 0, escaped = 0;
+	struct xt_param_buf param = {};
+	char *curchar;
 
 	/* After fighting with strtok enough, here's now
 	 * a 'real' parser. According to Rusty I'm now no
@@ -124,7 +138,7 @@ static void add_param_to_argv(char *pars
 	for (curchar = parsestart; *curchar; curchar++) {
 		if (quote_open) {
 			if (escaped) {
-				param_buffer[param_len++] = *curchar;
+				add_param(&param, curchar);
 				escaped = 0;
 				continue;
 			} else if (*curchar == '\\') {
@@ -134,7 +148,7 @@ static void add_param_to_argv(char *pars
 				quote_open = 0;
 				*curchar = ' ';
 			} else {
-				param_buffer[param_len++] = *curchar;
+				add_param(&param, curchar);
 				continue;
 			}
 		} else {
@@ -147,31 +161,27 @@ static void add_param_to_argv(char *pars
 		if (*curchar == ' '
 		    || *curchar == '\t'
 		    || * curchar == '\n') {
-			if (!param_len) {
+			if (!param.len) {
 				/* two spaces? */
 				continue;
 			}
 
-			param_buffer[param_len] = '\0';
+			param.buffer[param.len] = '\0';
 
 			/* check if table name specified */
-			if (!strncmp(param_buffer, "-t", 2)
-                            || !strncmp(param_buffer, "--table", 8)) {
+			if (!strncmp(param.buffer, "-t", 2)
+					|| !strncmp(param.buffer, "--table", 8)) {
 				xtables_error(PARAMETER_PROBLEM,
 				"The -t option (seen in line %u) cannot be "
 				"used in ip6tables-restore.\n", line);
 				exit(1);
 			}
 
-			add_argv(param_buffer);
-			param_len = 0;
+			add_argv(param.buffer);
+			param.len = 0;
 		} else {
 			/* regular character, copy to buffer */
-			param_buffer[param_len++] = *curchar;
-
-			if (param_len >= sizeof(param_buffer))
-				xtables_error(PARAMETER_PROBLEM,
-				   "Parameter too long!");
+			add_param(&param, curchar);
 		}
 	}
 }
--- a/iptables/iptables-restore.c	2019-08-06 16:00:15.820126170 +0530
+++ b/iptables/iptables-restore.c	2019-08-06 16:01:51.356122783 +0530
@@ -111,10 +111,24 @@ static void free_argv(void) {
 		free(newargv[i]);
 }
 
+struct xt_param_buf {
+	char	buffer[1024];
+	int 	len;
+};
+
+static void add_param(struct xt_param_buf *param, const char *curchar)
+{
+	param->buffer[param->len++] = *curchar;
+	if (param->len >= sizeof(param->buffer))
+		xtables_error(PARAMETER_PROBLEM,
+			      "Parameter too long!");
+}
+
 static void add_param_to_argv(char *parsestart)
 {
-	int quote_open = 0, escaped = 0, param_len = 0;
-	char param_buffer[1024], *curchar;
+	int quote_open = 0, escaped = 0;
+	struct xt_param_buf param = {};
+	char *curchar;
 
 	/* After fighting with strtok enough, here's now
 	 * a 'real' parser. According to Rusty I'm now no
@@ -123,7 +137,7 @@ static void add_param_to_argv(char *pars
 	for (curchar = parsestart; *curchar; curchar++) {
 		if (quote_open) {
 			if (escaped) {
-				param_buffer[param_len++] = *curchar;
+				add_param(&param, curchar);
 				escaped = 0;
 				continue;
 			} else if (*curchar == '\\') {
@@ -133,7 +147,7 @@ static void add_param_to_argv(char *pars
 				quote_open = 0;
 				*curchar = ' ';
 			} else {
-				param_buffer[param_len++] = *curchar;
+				add_param(&param, curchar);
 				continue;
 			}
 		} else {
@@ -146,31 +160,27 @@ static void add_param_to_argv(char *pars
 		if (*curchar == ' '
 		    || *curchar == '\t'
 		    || * curchar == '\n') {
-			if (!param_len) {
+			if (!param.len) {
 				/* two spaces? */
 				continue;
 			}
 
-			param_buffer[param_len] = '\0';
+			param.buffer[param.len] = '\0';
 
 			/* check if table name specified */
-			if (!strncmp(param_buffer, "-t", 2)
-			    || !strncmp(param_buffer, "--table", 8)) {
+			if (!strncmp(param.buffer, "-t", 2)
+					|| !strncmp(param.buffer, "--table", 8)) {
 				xtables_error(PARAMETER_PROBLEM,
 				"The -t option (seen in line %u) cannot be "
 				"used in iptables-restore.\n", line);
 				exit(1);
 			}
 
-			add_argv(param_buffer);
-			param_len = 0;
+			add_argv(param.buffer);
+			param.len = 0;
 		} else {
 			/* regular character, copy to buffer */
-			param_buffer[param_len++] = *curchar;
-
-			if (param_len >= sizeof(param_buffer))
-				xtables_error(PARAMETER_PROBLEM,
-				   "Parameter too long!");
+			add_param(&param, curchar);
 		}
 	}
 }
--- a/iptables/xtables-restore.c	2019-08-06 16:00:29.932125669 +0530
+++ b/iptables/xtables-restore.c	2019-08-06 16:02:24.672121603 +0530
@@ -95,10 +95,24 @@ static void free_argv(void) {
 		free(newargv[i]);
 }
 
+struct xt_param_buf {
+	char	buffer[1024];
+	int 	len;
+};
+
+static void add_param(struct xt_param_buf *param, const char *curchar)
+{
+	param->buffer[param->len++] = *curchar;
+	if (param->len >= sizeof(param->buffer))
+		xtables_error(PARAMETER_PROBLEM,
+			      "Parameter too long!");
+}
+
 static void add_param_to_argv(char *parsestart)
 {
-	int quote_open = 0, escaped = 0, param_len = 0;
-	char param_buffer[1024], *curchar;
+	int quote_open = 0, escaped = 0;
+	struct xt_param_buf param = {};
+	char *curchar;
 
 	/* After fighting with strtok enough, here's now
 	 * a 'real' parser. According to Rusty I'm now no
@@ -107,7 +121,7 @@ static void add_param_to_argv(char *pars
 	for (curchar = parsestart; *curchar; curchar++) {
 		if (quote_open) {
 			if (escaped) {
-				param_buffer[param_len++] = *curchar;
+				add_param(&param, curchar);
 				escaped = 0;
 				continue;
 			} else if (*curchar == '\\') {
@@ -117,7 +131,7 @@ static void add_param_to_argv(char *pars
 				quote_open = 0;
 				*curchar = ' ';
 			} else {
-				param_buffer[param_len++] = *curchar;
+				add_param(&param, curchar);
 				continue;
 			}
 		} else {
@@ -130,31 +144,27 @@ static void add_param_to_argv(char *pars
 		if (*curchar == ' '
 		    || *curchar == '\t'
 		    || * curchar == '\n') {
-			if (!param_len) {
+			if (!param.len) {
 				/* two spaces? */
 				continue;
 			}
 
-			param_buffer[param_len] = '\0';
+			param.buffer[param.len] = '\0';
 
 			/* check if table name specified */
-			if (!strncmp(param_buffer, "-t", 2)
-			    || !strncmp(param_buffer, "--table", 8)) {
+			if (!strncmp(param.buffer, "-t", 2)
+					|| !strncmp(param.buffer, "--table", 8)) {
 				xtables_error(PARAMETER_PROBLEM,
 				"The -t option (seen in line %u) cannot be "
 				"used in xtables-restore.\n", line);
 				exit(1);
 			}
 
-			add_argv(param_buffer);
-			param_len = 0;
+			add_argv(param.buffer);
+			param.len = 0;
 		} else {
 			/* regular character, copy to buffer */
-			param_buffer[param_len++] = *curchar;
-
-			if (param_len >= sizeof(param_buffer))
-				xtables_error(PARAMETER_PROBLEM,
-				   "Parameter too long!");
+			add_param(&param, curchar);
 		}
 	}
 }

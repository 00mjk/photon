diff --git a/cloudinit/sources/DataSourceAzure.py b/cloudinit/sources/DataSourceAzure.py
index 24f448c5..f82330a1 100755
--- a/cloudinit/sources/DataSourceAzure.py
+++ b/cloudinit/sources/DataSourceAzure.py
@@ -40,7 +40,7 @@ LOG = logging.getLogger(__name__)
 
 DS_NAME = 'Azure'
 DEFAULT_METADATA = {"instance-id": "iid-AZURE-NODE"}
-AGENT_START = ['service', 'walinuxagent', 'start']
+AGENT_START = ['systemctl', 'start', 'waagent']
 AGENT_START_BUILTIN = "__builtin__"
 BOUNCE_COMMAND_IFUP = [
     'sh', '-xc',
diff --git a/cloudinit/sources/helpers/azure.py b/cloudinit/sources/helpers/azure.py
index fc760581..2e81fec0 100755
--- a/cloudinit/sources/helpers/azure.py
+++ b/cloudinit/sources/helpers/azure.py
@@ -8,6 +8,7 @@ import socket
 import struct
 import time
 import textwrap
+import configobj
 
 from cloudinit.net import dhcp
 from cloudinit import stages
@@ -22,6 +23,7 @@ from cloudinit import distros
 from cloudinit.reporting import events
 from cloudinit.net.dhcp import EphemeralDHCPv4
 from datetime import datetime
+from io import StringIO
 
 LOG = logging.getLogger(__name__)
 
@@ -32,6 +34,7 @@ DEFAULT_WIRESERVER_ENDPOINT = "a8:3f:81:10"
 BOOT_EVENT_TYPE = 'boot-telemetry'
 SYSTEMINFO_EVENT_TYPE = 'system-info'
 DIAGNOSTIC_EVENT_TYPE = 'diagnostic'
+NETWORKD_LEASES_DIR = '/run/systemd/netif/leases'
 
 azure_ds_reporter = events.ReportEventStack(
     name="azure-ds",
@@ -474,6 +477,32 @@ class WALinuxAgentShim(object):
                     '{_file} is not valid JSON data'.format(_file=hook_file))
         return dhcp_options
 
+    @staticmethod
+    def networkd_parse_lease(content):
+        """Parse a systemd lease file content as in /run/systemd/netif/leases/
+        Parse this (almost) ini style file even though it says:
+          # This is private data. Do not parse.
+        Simply return a dictionary of key/values."""
+
+        return dict(configobj.ConfigObj(StringIO(content), list_values=False))
+
+    @staticmethod
+    def networkd_load_leases(leases_d=None):
+        """Return a dictionary of dictionaries representing each lease
+        found in lease_d.i
+        The top level key will be the filename, which is typically the ifindex."""
+
+        if leases_d is None:
+            leases_d = NETWORKD_LEASES_DIR
+
+        ret = {}
+        if not os.path.isdir(leases_d):
+            return ret
+        for lfile in os.listdir(leases_d):
+            ret[lfile] = WALinuxAgentShim.networkd_parse_lease(
+                util.load_file(os.path.join(leases_d, lfile)))
+        return ret
+
     @staticmethod
     @azure_ds_telemetry_reporter
     def _get_value_from_dhcpoptions(dhcp_options):
@@ -506,6 +535,7 @@ class WALinuxAgentShim(object):
             LOG.debug('Finding Azure endpoint from hook json...')
             dhcp_options = WALinuxAgentShim._load_dhclient_json()
             value = WALinuxAgentShim._get_value_from_dhcpoptions(dhcp_options)
+            LOG.debug('networkd value from lease %s', value)
         if value is None:
             # Fallback and check the leases file if unsuccessful
             report_diagnostic_event("No Azure endpoint from dhclient logs")
